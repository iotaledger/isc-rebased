// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package sui_graph

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// GetAssetsBagOwner includes the requested fields of the GraphQL type Owner.
// The GraphQL type's documentation follows.
//
// An Owner is an entity that can own an object. Each Owner is identified by a SuiAddress which
// represents either an Address (corresponding to a public key of an account) or an Object, but
// never both (it is not known up-front whether a given Owner is an Address or an Object).
type GetAssetsBagOwner struct {
	// The dynamic fields and dynamic object fields on an object.
	//
	// This field exists as a convenience when accessing a dynamic field on a wrapped object.
	DynamicFields GetAssetsBagOwnerDynamicFieldsDynamicFieldConnection `json:"dynamicFields"`
}

// GetDynamicFields returns GetAssetsBagOwner.DynamicFields, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwner) GetDynamicFields() GetAssetsBagOwnerDynamicFieldsDynamicFieldConnection {
	return v.DynamicFields
}

// GetAssetsBagOwnerDynamicFieldsDynamicFieldConnection includes the requested fields of the GraphQL type DynamicFieldConnection.
type GetAssetsBagOwnerDynamicFieldsDynamicFieldConnection struct {
	// A list of nodes.
	Nodes []GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField `json:"nodes"`
}

// GetNodes returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnection) GetNodes() []GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField {
	return v.Nodes
}

// GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField includes the requested fields of the GraphQL type DynamicField.
// The GraphQL type's documentation follows.
//
// Dynamic fields are heterogeneous fields that can be added or removed at runtime,
// and can have arbitrary user-assigned names. There are two sub-types of dynamic
// fields:
//
// 1) Dynamic Fields can store any value that has the `store` ability, however an object
// stored in this kind of field will be considered wrapped and will not be accessible
// directly via its ID by external tools (explorers, wallets, etc) accessing storage.
// 2) Dynamic Object Fields values must be Sui objects (have the `key` and `store`
// abilities, and id: UID as the first field), but will still be directly accessible off-chain
// via their object ID after being attached.
type GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField struct {
	// The string type, data, and serialized value of the DynamicField's 'name' field.
	// This field is used to uniquely identify a child of the parent object.
	Name GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue `json:"name"`
	// The actual data stored in the dynamic field.
	// The returned dynamic field is an object if its return type is MoveObject,
	// in which case it is also accessible off-chain via its address.
	Value GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue `json:"-"`
}

// GetName returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField.Name, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField) GetName() GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue {
	return v.Name
}

// GetValue returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField.Value, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField) GetValue() GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue {
	return v.Value
}

func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField
		Value json.RawMessage `json:"value"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Value
		src := firstPass.Value
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField.Value: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField struct {
	Name GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue `json:"name"`

	Value json.RawMessage `json:"value"`
}

func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField) __premarshalJSON() (*__premarshalGetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField, error) {
	var retval __premarshalGetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField

	retval.Name = v.Name
	{

		dst := &retval.Value
		src := v.Value
		var err error
		*dst, err = __marshalGetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField.Value: %w", err)
		}
	}
	return &retval, nil
}

// GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue includes the requested fields of the GraphQL type MoveValue.
type GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue struct {
	Value `json:"-"`
}

// GetType returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue.Type, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue) GetType() ValueTypeMoveType {
	return v.Value.Type
}

// GetJson returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue.Json, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue) GetJson() any {
	return v.Value.Json
}

func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue
		graphql.NoUnmarshalJSON
	}
	firstPass.GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Value)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue struct {
	Type ValueTypeMoveType `json:"type"`

	Json any `json:"json"`
}

func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue) __premarshalJSON() (*__premarshalGetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue, error) {
	var retval __premarshalGetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue

	retval.Type = v.Value.Type
	retval.Json = v.Value.Json
	return &retval, nil
}

// GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue includes the requested fields of the GraphQL interface DynamicFieldValue.
//
// GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue is implemented by the following types:
// GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject
// GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue
type GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue interface {
	implementsGraphQLInterfaceGetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject) implementsGraphQLInterfaceGetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue() {
}
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue) implementsGraphQLInterfaceGetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue() {
}

func __unmarshalGetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue(b []byte, v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "MoveObject":
		*v = new(GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject)
		return json.Unmarshal(b, *v)
	case "MoveValue":
		*v = new(GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DynamicFieldValue.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue: "%v"`, tn.TypeName)
	}
}

func __marshalGetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue(v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject:
		typename = "MoveObject"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject
		}{typename, v}
		return json.Marshal(result)
	case *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue:
		typename = "MoveValue"

		result := struct {
			TypeName string `json:"__typename"`
			*GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue: "%T"`, v)
	}
}

// GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject struct {
	Typename string `json:"__typename"`
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue `json:"contents"`
}

// GetTypename returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject.Typename, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject) GetTypename() string {
	return v.Typename
}

// GetContents returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject.Contents, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject) GetContents() GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue {
	return v.Contents
}

// GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue struct {
	// The value's Move type.
	Type GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValueTypeMoveType `json:"type"`
	// Representation of a Move value in JSON, where:
	//
	// - Addresses, IDs, and UIDs are represented in canonical form, as JSON strings.
	// - Bools are represented by JSON boolean literals.
	// - u8, u16, and u32 are represented as JSON numbers.
	// - u64, u128, and u256 are represented as JSON strings.
	// - Vectors are represented by JSON arrays.
	// - Structs are represented by JSON objects.
	// - Empty optional values are represented by `null`.
	//
	// This form is offered as a less verbose convenience in cases where the layout of the type is
	// known by the client.
	Nft any `json:"nft"`
}

// GetType returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue.Type, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue) GetType() GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValueTypeMoveType {
	return v.Type
}

// GetNft returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue.Nft, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue) GetNft() any {
	return v.Nft
}

// GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValueTypeMoveType) GetRepr() string {
	return v.Repr
}

// GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue includes the requested fields of the GraphQL type MoveValue.
type GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue struct {
	Typename string `json:"__typename"`
	// The value's Move type.
	Type GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValueTypeMoveType `json:"type"`
	// Representation of a Move value in JSON, where:
	//
	// - Addresses, IDs, and UIDs are represented in canonical form, as JSON strings.
	// - Bools are represented by JSON boolean literals.
	// - u8, u16, and u32 are represented as JSON numbers.
	// - u64, u128, and u256 are represented as JSON strings.
	// - Vectors are represented by JSON arrays.
	// - Structs are represented by JSON objects.
	// - Empty optional values are represented by `null`.
	//
	// This form is offered as a less verbose convenience in cases where the layout of the type is
	// known by the client.
	Coin any `json:"coin"`
}

// GetTypename returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue.Typename, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue) GetTypename() string {
	return v.Typename
}

// GetType returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue.Type, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue) GetType() GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValueTypeMoveType {
	return v.Type
}

// GetCoin returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue.Coin, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue) GetCoin() any {
	return v.Coin
}

// GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *GetAssetsBagOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValueTypeMoveType) GetRepr() string {
	return v.Repr
}

// GetAssetsBagResponse is returned by GetAssetsBag on success.
type GetAssetsBagResponse struct {
	Owner GetAssetsBagOwner `json:"owner"`
}

// GetOwner returns GetAssetsBagResponse.Owner, and is useful for accessing the field via an interface.
func (v *GetAssetsBagResponse) GetOwner() GetAssetsBagOwner { return v.Owner }

// Value includes the GraphQL fields of MoveValue requested by the fragment Value.
type Value struct {
	// The value's Move type.
	Type ValueTypeMoveType `json:"type"`
	// Representation of a Move value in JSON, where:
	//
	// - Addresses, IDs, and UIDs are represented in canonical form, as JSON strings.
	// - Bools are represented by JSON boolean literals.
	// - u8, u16, and u32 are represented as JSON numbers.
	// - u64, u128, and u256 are represented as JSON strings.
	// - Vectors are represented by JSON arrays.
	// - Structs are represented by JSON objects.
	// - Empty optional values are represented by `null`.
	//
	// This form is offered as a less verbose convenience in cases where the layout of the type is
	// known by the client.
	Json any `json:"json"`
}

// GetType returns Value.Type, and is useful for accessing the field via an interface.
func (v *Value) GetType() ValueTypeMoveType { return v.Type }

// GetJson returns Value.Json, and is useful for accessing the field via an interface.
func (v *Value) GetJson() any { return v.Json }

// ValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type ValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns ValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *ValueTypeMoveType) GetRepr() string { return v.Repr }

// __GetAssetsBagInput is used internally by genqlient
type __GetAssetsBagInput struct {
	BagId string `json:"bagId"`
}

// GetBagId returns __GetAssetsBagInput.BagId, and is useful for accessing the field via an interface.
func (v *__GetAssetsBagInput) GetBagId() string { return v.BagId }

// The query or mutation executed by GetAssetsBag.
const GetAssetsBag_Operation = `
query GetAssetsBag ($bagId: SuiAddress!) {
	owner(address: $bagId) {
		dynamicFields {
			nodes {
				name {
					... Value
				}
				value {
					__typename
					... on MoveValue {
						type {
							repr
						}
						coin: json
					}
					... on MoveObject {
						contents {
							type {
								repr
							}
							nft: json
						}
					}
				}
			}
		}
	}
}
fragment Value on MoveValue {
	type {
		repr
	}
	json
}
`

func GetAssetsBag(
	ctx_ context.Context,
	client_ graphql.Client,
	bagId string,
) (*GetAssetsBagResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAssetsBag",
		Query:  GetAssetsBag_Operation,
		Variables: &__GetAssetsBagInput{
			BagId: bagId,
		},
	}
	var err_ error

	var data_ GetAssetsBagResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
